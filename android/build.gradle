buildscript {
  ext.safeExtGet = { prop, fallback ->
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
  }
}

plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
}

group = 'concealcrypto'
version = '0.2.3'

android {
  namespace "concealcrypto"
  
  compileSdkVersion safeExtGet("compileSdkVersion", 34)

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 24)
    targetSdkVersion safeExtGet("targetSdkVersion", 34)
    versionCode 1
    versionName "0.2.3"

    // Tell Gradle to compile for all standard ABIs
    ndk {
      abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
    }

    // Configure CMake to use shared C++ STL (required by fbjni and React Native)
    externalNativeBuild {
      cmake {
        arguments "-DANDROID_STL=c++_shared"
      }
    }
  }

  // Enable Prefab so CMake can find fbjni, ReactAndroid, etc.
  buildFeatures {
    prefab true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lint {
    abortOnError false
  }

  // Include generated Kotlin files from Nitrogen
  sourceSets {
    main {
      java {
        srcDirs += ['../nitrogen/generated/android/kotlin']
      }
    }
  }

  // Required by Nitro to handle shared C++ libraries
  externalNativeBuild {
    cmake {
      path("CMakeLists.txt")
    }
  }
}

repositories {
    google()
    mavenCentral()
    maven { url("$rootDir/../node_modules/react-native/android") }
    maven { url("$rootDir/../node_modules/react-native-nitro-modules/android") }
}

dependencies {
  // React Native (provided by the app)
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-android:+"
  implementation "com.facebook.fbjni:fbjni:0.5.1"
  
  // Nitro Modules (for HybridObject, ArrayBuffer, etc.)
  implementation project(":react-native-nitro-modules")


  // Kotlin
  implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.24"
}

// Resolves "LOCAL_SRC_FILES points to a missing file" - ensures React Native libs are packaged before CMake configures
tasks.whenTaskAdded { task ->
  if (task.name.contains("configureCMakeDebug")) {
    rootProject.getTasksByName("packageReactNdkDebugLibs", true).forEach {
      task.dependsOn(it)
    }
  }
  if (task.name.contains("configureCMakeRel")) {
    rootProject.getTasksByName("packageReactNdkReleaseLibs", true).forEach {
      task.dependsOn(it)
    }
  }
}
