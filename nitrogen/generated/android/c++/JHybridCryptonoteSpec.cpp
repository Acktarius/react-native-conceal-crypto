///
/// JHybridCryptonoteSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridCryptonoteSpec.hpp"



#include <string>

namespace margelo::nitro::concealcrypto {

  jni::local_ref<JHybridCryptonoteSpec::jhybriddata> JHybridCryptonoteSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridCryptonoteSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridCryptonoteSpec::initHybrid),
    });
  }

  size_t JHybridCryptonoteSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridCryptonoteSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::string JHybridCryptonoteSpec::generateKeyDerivation(const std::string& publicKeyHex, const std::string& secretKeyHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* publicKeyHex */, jni::alias_ref<jni::JString> /* secretKeyHex */)>("generateKeyDerivation");
    auto __result = method(_javaPart, jni::make_jstring(publicKeyHex), jni::make_jstring(secretKeyHex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::derivePublicKey(const std::string& derivationHex, double outputIndex, const std::string& publicKeyHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* derivationHex */, double /* outputIndex */, jni::alias_ref<jni::JString> /* publicKeyHex */)>("derivePublicKey");
    auto __result = method(_javaPart, jni::make_jstring(derivationHex), outputIndex, jni::make_jstring(publicKeyHex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::geScalarmult(const std::string& publicKeyHex, const std::string& secretKeyHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* publicKeyHex */, jni::alias_ref<jni::JString> /* secretKeyHex */)>("geScalarmult");
    auto __result = method(_javaPart, jni::make_jstring(publicKeyHex), jni::make_jstring(secretKeyHex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::geAdd(const std::string& point1Hex, const std::string& point2Hex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* point1Hex */, jni::alias_ref<jni::JString> /* point2Hex */)>("geAdd");
    auto __result = method(_javaPart, jni::make_jstring(point1Hex), jni::make_jstring(point2Hex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::geScalarmultBase(const std::string& secretKeyHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* secretKeyHex */)>("geScalarmultBase");
    auto __result = method(_javaPart, jni::make_jstring(secretKeyHex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::geDoubleScalarmultBaseVartime(const std::string& cHex, const std::string& PHex, const std::string& rHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* cHex */, jni::alias_ref<jni::JString> /* PHex */, jni::alias_ref<jni::JString> /* rHex */)>("geDoubleScalarmultBaseVartime");
    auto __result = method(_javaPart, jni::make_jstring(cHex), jni::make_jstring(PHex), jni::make_jstring(rHex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::geDoubleScalarmultPostcompVartime(const std::string& rHex, const std::string& PHex, const std::string& cHex, const std::string& IHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* rHex */, jni::alias_ref<jni::JString> /* PHex */, jni::alias_ref<jni::JString> /* cHex */, jni::alias_ref<jni::JString> /* IHex */)>("geDoubleScalarmultPostcompVartime");
    auto __result = method(_javaPart, jni::make_jstring(rHex), jni::make_jstring(PHex), jni::make_jstring(cHex), jni::make_jstring(IHex));
    return __result->toStdString();
  }
  std::string JHybridCryptonoteSpec::cnFastHash(const std::string& inputHex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* inputHex */)>("cnFastHash");
    auto __result = method(_javaPart, jni::make_jstring(inputHex));
    return __result->toStdString();
  }

} // namespace margelo::nitro::concealcrypto
