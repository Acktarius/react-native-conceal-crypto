///
/// JHybridConcealCryptoSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridConcealCryptoSpec.hpp"

// Forward declaration of `HybridCryptonoteSpec` to properly resolve imports.
namespace margelo::nitro::concealcrypto { class HybridCryptonoteSpec; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <memory>
#include "HybridCryptonoteSpec.hpp"
#include "JHybridCryptonoteSpec.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>
#include <optional>

namespace margelo::nitro::concealcrypto {

  jni::local_ref<JHybridConcealCryptoSpec::jhybriddata> JHybridConcealCryptoSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridConcealCryptoSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridConcealCryptoSpec::initHybrid),
    });
  }

  size_t JHybridConcealCryptoSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridConcealCryptoSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  std::shared_ptr<HybridCryptonoteSpec> JHybridConcealCryptoSpec::getCryptonote() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JHybridCryptonoteSpec::javaobject>()>("getCryptonote");
    auto __result = method(_javaPart);
    return __result->cthis()->shared_cast<JHybridCryptonoteSpec>();
  }

  // Methods
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::hextobin(const std::string& hex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<jni::JString> /* hex */)>("hextobin");
    auto __result = method(_javaPart, jni::make_jstring(hex));
    return __result->cthis()->getArrayBuffer();
  }
  std::string JHybridConcealCryptoSpec::bintohex(const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("bintohex");
    auto __result = method(_javaPart, JArrayBuffer::wrap(buffer));
    return __result->toStdString();
  }
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::chacha8(const std::shared_ptr<ArrayBuffer>& input, const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& iv) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* input */, jni::alias_ref<JArrayBuffer::javaobject> /* key */, jni::alias_ref<JArrayBuffer::javaobject> /* iv */)>("chacha8");
    auto __result = method(_javaPart, JArrayBuffer::wrap(input), JArrayBuffer::wrap(key), JArrayBuffer::wrap(iv));
    return __result->cthis()->getArrayBuffer();
  }
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::chacha12(const std::shared_ptr<ArrayBuffer>& input, const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& iv) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* input */, jni::alias_ref<JArrayBuffer::javaobject> /* key */, jni::alias_ref<JArrayBuffer::javaobject> /* iv */)>("chacha12");
    auto __result = method(_javaPart, JArrayBuffer::wrap(input), JArrayBuffer::wrap(key), JArrayBuffer::wrap(iv));
    return __result->cthis()->getArrayBuffer();
  }
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::hmacSha1(const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& data) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* key */, jni::alias_ref<JArrayBuffer::javaobject> /* data */)>("hmacSha1");
    auto __result = method(_javaPart, JArrayBuffer::wrap(key), JArrayBuffer::wrap(data));
    return __result->cthis()->getArrayBuffer();
  }
  std::string JHybridConcealCryptoSpec::random(double bits) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(double /* bits */)>("random");
    auto __result = method(_javaPart, bits);
    return __result->toStdString();
  }
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::randomBytes(double bytes) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(double /* bytes */)>("randomBytes");
    auto __result = method(_javaPart, bytes);
    return __result->cthis()->getArrayBuffer();
  }
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::secretbox(const std::shared_ptr<ArrayBuffer>& message, const std::shared_ptr<ArrayBuffer>& nonce, const std::shared_ptr<ArrayBuffer>& key) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* message */, jni::alias_ref<JArrayBuffer::javaobject> /* nonce */, jni::alias_ref<JArrayBuffer::javaobject> /* key */)>("secretbox");
    auto __result = method(_javaPart, JArrayBuffer::wrap(message), JArrayBuffer::wrap(nonce), JArrayBuffer::wrap(key));
    return __result->cthis()->getArrayBuffer();
  }
  std::optional<std::shared_ptr<ArrayBuffer>> JHybridConcealCryptoSpec::secretboxOpen(const std::shared_ptr<ArrayBuffer>& ciphertext, const std::shared_ptr<ArrayBuffer>& nonce, const std::shared_ptr<ArrayBuffer>& key) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* ciphertext */, jni::alias_ref<JArrayBuffer::javaobject> /* nonce */, jni::alias_ref<JArrayBuffer::javaobject> /* key */)>("secretboxOpen");
    auto __result = method(_javaPart, JArrayBuffer::wrap(ciphertext), JArrayBuffer::wrap(nonce), JArrayBuffer::wrap(key));
    return __result != nullptr ? std::make_optional(__result->cthis()->getArrayBuffer()) : std::nullopt;
  }

} // namespace margelo::nitro::concealcrypto
