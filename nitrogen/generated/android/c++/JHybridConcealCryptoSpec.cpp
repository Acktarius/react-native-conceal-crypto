///
/// JHybridConcealCryptoSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridConcealCryptoSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>
#include <string>

namespace margelo::nitro::concealcrypto {

  jni::local_ref<JHybridConcealCryptoSpec::jhybriddata> JHybridConcealCryptoSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridConcealCryptoSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridConcealCryptoSpec::initHybrid),
    });
  }

  size_t JHybridConcealCryptoSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridConcealCryptoSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::hextobin(const std::string& hex) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<jni::JString> /* hex */)>("hextobin");
    auto __result = method(_javaPart, jni::make_jstring(hex));
    return __result->cthis()->getArrayBuffer();
  }
  std::string JHybridConcealCryptoSpec::bintohex(const std::shared_ptr<ArrayBuffer>& buffer) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<JArrayBuffer::javaobject> /* buffer */)>("bintohex");
    auto __result = method(_javaPart, JArrayBuffer::wrap(buffer));
    return __result->toStdString();
  }
  std::shared_ptr<ArrayBuffer> JHybridConcealCryptoSpec::chacha8(const std::shared_ptr<ArrayBuffer>& input, const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& iv) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<JArrayBuffer::javaobject> /* input */, jni::alias_ref<JArrayBuffer::javaobject> /* key */, jni::alias_ref<JArrayBuffer::javaobject> /* iv */)>("chacha8");
    auto __result = method(_javaPart, JArrayBuffer::wrap(input), JArrayBuffer::wrap(key), JArrayBuffer::wrap(iv));
    return __result->cthis()->getArrayBuffer();
  }

} // namespace margelo::nitro::concealcrypto
