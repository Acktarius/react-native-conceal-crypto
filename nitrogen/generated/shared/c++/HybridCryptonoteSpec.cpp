///
/// HybridCryptonoteSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridCryptonoteSpec.hpp"

namespace margelo::nitro::concealcrypto {

  void HybridCryptonoteSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("generateKeyDerivation", &HybridCryptonoteSpec::generateKeyDerivation);
      prototype.registerHybridMethod("derivePublicKey", &HybridCryptonoteSpec::derivePublicKey);
      prototype.registerHybridMethod("geScalarmult", &HybridCryptonoteSpec::geScalarmult);
      prototype.registerHybridMethod("geAdd", &HybridCryptonoteSpec::geAdd);
      prototype.registerHybridMethod("geScalarmultBase", &HybridCryptonoteSpec::geScalarmultBase);
      prototype.registerHybridMethod("geDoubleScalarmultBaseVartime", &HybridCryptonoteSpec::geDoubleScalarmultBaseVartime);
      prototype.registerHybridMethod("geDoubleScalarmultPostcompVartime", &HybridCryptonoteSpec::geDoubleScalarmultPostcompVartime);
    });
  }

} // namespace margelo::nitro::concealcrypto
