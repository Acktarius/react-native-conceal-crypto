///
/// HybridConcealCryptoSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridConcealCryptoSpec.hpp"

namespace margelo::nitro::concealcrypto {

  void HybridConcealCryptoSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridGetter("cryptonote", &HybridConcealCryptoSpec::getCryptonote);
      prototype.registerHybridMethod("hextobin", &HybridConcealCryptoSpec::hextobin);
      prototype.registerHybridMethod("bintohex", &HybridConcealCryptoSpec::bintohex);
      prototype.registerHybridMethod("bin2base64", &HybridConcealCryptoSpec::bin2base64);
      prototype.registerHybridMethod("base642bin", &HybridConcealCryptoSpec::base642bin);
      prototype.registerHybridMethod("chacha8", &HybridConcealCryptoSpec::chacha8);
      prototype.registerHybridMethod("chacha12", &HybridConcealCryptoSpec::chacha12);
      prototype.registerHybridMethod("hmacSha1", &HybridConcealCryptoSpec::hmacSha1);
      prototype.registerHybridMethod("random", &HybridConcealCryptoSpec::random);
      prototype.registerHybridMethod("randomBytes", &HybridConcealCryptoSpec::randomBytes);
      prototype.registerHybridMethod("secretbox", &HybridConcealCryptoSpec::secretbox);
      prototype.registerHybridMethod("secretboxOpen", &HybridConcealCryptoSpec::secretboxOpen);
    });
  }

} // namespace margelo::nitro::concealcrypto
