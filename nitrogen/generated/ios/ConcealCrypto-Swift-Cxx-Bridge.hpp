///
/// ConcealCrypto-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `HybridConcealCryptoSpec` to properly resolve imports.
namespace margelo::nitro::concealcrypto { class HybridConcealCryptoSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridConcealCryptoSpec_cxx` to properly resolve imports.
namespace ConcealCrypto { class HybridConcealCryptoSpec_cxx; }

// Include C++ defined types
#include "HybridConcealCryptoSpec.hpp"
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <memory>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::concealcrypto::bridge::swift {

  // pragma MARK: std::shared_ptr<HybridConcealCryptoSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridConcealCryptoSpec>`.
   */
  using std__shared_ptr_HybridConcealCryptoSpec_ = std::shared_ptr<HybridConcealCryptoSpec>;
  std::shared_ptr<HybridConcealCryptoSpec> create_std__shared_ptr_HybridConcealCryptoSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridConcealCryptoSpec_(std__shared_ptr_HybridConcealCryptoSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridConcealCryptoSpec>
  using std__weak_ptr_HybridConcealCryptoSpec_ = std::weak_ptr<HybridConcealCryptoSpec>;
  inline std__weak_ptr_HybridConcealCryptoSpec_ weakify_std__shared_ptr_HybridConcealCryptoSpec_(const std::shared_ptr<HybridConcealCryptoSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<ArrayBuffer>>
  using Result_std__shared_ptr_ArrayBuffer__ = Result<std::shared_ptr<ArrayBuffer>>;
  inline Result_std__shared_ptr_ArrayBuffer__ create_Result_std__shared_ptr_ArrayBuffer__(const std::shared_ptr<ArrayBuffer>& value) noexcept {
    return Result<std::shared_ptr<ArrayBuffer>>::withValue(value);
  }
  inline Result_std__shared_ptr_ArrayBuffer__ create_Result_std__shared_ptr_ArrayBuffer__(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<ArrayBuffer>>::withError(error);
  }
  
  // pragma MARK: Result<std::string>
  using Result_std__string_ = Result<std::string>;
  inline Result_std__string_ create_Result_std__string_(const std::string& value) noexcept {
    return Result<std::string>::withValue(value);
  }
  inline Result_std__string_ create_Result_std__string_(const std::exception_ptr& error) noexcept {
    return Result<std::string>::withError(error);
  }

} // namespace margelo::nitro::concealcrypto::bridge::swift
