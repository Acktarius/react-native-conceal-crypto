///
/// HybridConcealCryptoSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridConcealCryptoSpec.hpp"

// Forward declaration of `HybridConcealCryptoSpec_cxx` to properly resolve imports.
namespace ConcealCrypto { class HybridConcealCryptoSpec_cxx; }

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>
#include <string>
#include <optional>

#include "ConcealCrypto-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::concealcrypto {

  /**
   * The C++ part of HybridConcealCryptoSpec_cxx.swift.
   *
   * HybridConcealCryptoSpecSwift (C++) accesses HybridConcealCryptoSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridConcealCryptoSpec_cxx can directly inherit from the C++ class HybridConcealCryptoSpec
   * to simplify the whole structure and memory management.
   */
  class HybridConcealCryptoSpecSwift: public virtual HybridConcealCryptoSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridConcealCryptoSpecSwift(const ConcealCrypto::HybridConcealCryptoSpec_cxx& swiftPart):
      HybridObject(HybridConcealCryptoSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline ConcealCrypto::HybridConcealCryptoSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<ArrayBuffer> hextobin(const std::string& hex) override {
      auto __result = _swiftPart.hextobin(hex);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string bintohex(const std::shared_ptr<ArrayBuffer>& buffer) override {
      auto __result = _swiftPart.bintohex(ArrayBufferHolder(buffer));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> chacha8(const std::shared_ptr<ArrayBuffer>& input, const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& iv) override {
      auto __result = _swiftPart.chacha8(ArrayBufferHolder(input), ArrayBufferHolder(key), ArrayBufferHolder(iv));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> chacha12(const std::shared_ptr<ArrayBuffer>& input, const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& iv) override {
      auto __result = _swiftPart.chacha12(ArrayBufferHolder(input), ArrayBufferHolder(key), ArrayBufferHolder(iv));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> hmacSha1(const std::shared_ptr<ArrayBuffer>& key, const std::shared_ptr<ArrayBuffer>& data) override {
      auto __result = _swiftPart.hmacSha1(ArrayBufferHolder(key), ArrayBufferHolder(data));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::string random(double bits) override {
      auto __result = _swiftPart.random(std::forward<decltype(bits)>(bits));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> randomBytes(double bytes) override {
      auto __result = _swiftPart.randomBytes(std::forward<decltype(bytes)>(bytes));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<ArrayBuffer> secretbox(const std::shared_ptr<ArrayBuffer>& message, const std::shared_ptr<ArrayBuffer>& nonce, const std::shared_ptr<ArrayBuffer>& key) override {
      auto __result = _swiftPart.secretbox(ArrayBufferHolder(message), ArrayBufferHolder(nonce), ArrayBufferHolder(key));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::optional<std::shared_ptr<ArrayBuffer>> secretboxOpen(const std::shared_ptr<ArrayBuffer>& ciphertext, const std::shared_ptr<ArrayBuffer>& nonce, const std::shared_ptr<ArrayBuffer>& key) override {
      auto __result = _swiftPart.secretboxOpen(ArrayBufferHolder(ciphertext), ArrayBufferHolder(nonce), ArrayBufferHolder(key));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    ConcealCrypto::HybridConcealCryptoSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::concealcrypto
