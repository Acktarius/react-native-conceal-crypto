///
/// HybridConcealCryptoSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridConcealCryptoSpec``
public protocol HybridConcealCryptoSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func hextobin(hex: String) throws -> ArrayBuffer
  func bintohex(buffer: ArrayBuffer) throws -> String
  func chacha8(input: ArrayBuffer, key: ArrayBuffer, iv: ArrayBuffer) throws -> ArrayBuffer
  func chacha12(input: ArrayBuffer, key: ArrayBuffer, iv: ArrayBuffer) throws -> ArrayBuffer
  func hmacSha1(key: ArrayBuffer, data: ArrayBuffer) throws -> ArrayBuffer
}

/// See ``HybridConcealCryptoSpec``
open class HybridConcealCryptoSpec_base {
  private weak var cxxWrapper: HybridConcealCryptoSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridConcealCryptoSpec_cxx {
  #if DEBUG
    guard self is HybridConcealCryptoSpec else {
      fatalError("`self` is not a `HybridConcealCryptoSpec`! Did you accidentally inherit from `HybridConcealCryptoSpec_base` instead of `HybridConcealCryptoSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridConcealCryptoSpec_cxx(self as! HybridConcealCryptoSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ConcealCrypto HybridObject.
 * Implement this protocol to create Swift-based instances of ConcealCrypto.
 * ```swift
 * class HybridConcealCrypto : HybridConcealCryptoSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridConcealCryptoSpec = HybridConcealCryptoSpec_protocol & HybridConcealCryptoSpec_base
