///
/// HybridCryptonoteSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridCryptonoteSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridCryptonoteSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::concealcrypto::bridge::swift`)
   * from `ConcealCrypto-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.concealcrypto.bridge.swift

  /**
   * Holds an instance of the `HybridCryptonoteSpec` Swift protocol.
   */
  private var __implementation: any HybridCryptonoteSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridCryptonoteSpec_

  /**
   * Create a new `HybridCryptonoteSpec_cxx` that wraps the given `HybridCryptonoteSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridCryptonoteSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridCryptonoteSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridCryptonoteSpec() -> any HybridCryptonoteSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridCryptonoteSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridCryptonoteSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridCryptonoteSpec_cxx {
    return Unmanaged<HybridCryptonoteSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridCryptonoteSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridCryptonoteSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridCryptonoteSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridCryptonoteSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func generateKeyDerivation(publicKeyHex: std.string, secretKeyHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.generateKeyDerivation(publicKeyHex: String(publicKeyHex), secretKeyHex: String(secretKeyHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func derivePublicKey(derivationHex: std.string, outputIndex: Double, publicKeyHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.derivePublicKey(derivationHex: String(derivationHex), outputIndex: outputIndex, publicKeyHex: String(publicKeyHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func geScalarmult(publicKeyHex: std.string, secretKeyHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.geScalarmult(publicKeyHex: String(publicKeyHex), secretKeyHex: String(secretKeyHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func geAdd(point1Hex: std.string, point2Hex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.geAdd(point1Hex: String(point1Hex), point2Hex: String(point2Hex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func geScalarmultBase(secretKeyHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.geScalarmultBase(secretKeyHex: String(secretKeyHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func geDoubleScalarmultBaseVartime(cHex: std.string, PHex: std.string, rHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.geDoubleScalarmultBaseVartime(cHex: String(cHex), PHex: String(PHex), rHex: String(rHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func geDoubleScalarmultPostcompVartime(rHex: std.string, PHex: std.string, cHex: std.string, IHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.geDoubleScalarmultPostcompVartime(rHex: String(rHex), PHex: String(PHex), cHex: String(cHex), IHex: String(IHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func cnFastHash(inputHex: std.string) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.cnFastHash(inputHex: String(inputHex))
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func encodeVarint(value: Double) -> bridge.Result_std__string_ {
    do {
      let __result = try self.__implementation.encodeVarint(value: value)
      let __resultCpp = std.string(__result)
      return bridge.create_Result_std__string_(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__string_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func generateRingSignature(prefixHashHex: std.string, keyImageHex: std.string, publicKeysHex: bridge.std__vector_std__string_, secretKeyHex: std.string, secretIndex: Double) -> bridge.Result_std__vector_std__string__ {
    do {
      let __result = try self.__implementation.generateRingSignature(prefixHashHex: String(prefixHashHex), keyImageHex: String(keyImageHex), publicKeysHex: publicKeysHex.map({ __item in String(__item) }), secretKeyHex: String(secretKeyHex), secretIndex: secretIndex)
      let __resultCpp = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(__result.count)
        for __item in __result {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
      return bridge.create_Result_std__vector_std__string__(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__vector_std__string__(__exceptionPtr)
    }
  }
}
