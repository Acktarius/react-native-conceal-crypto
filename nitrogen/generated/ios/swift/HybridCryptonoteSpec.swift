///
/// HybridCryptonoteSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridCryptonoteSpec``
public protocol HybridCryptonoteSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func generateKeyDerivation(publicKeyHex: String, secretKeyHex: String) throws -> String
  func derivePublicKey(derivationHex: String, outputIndex: Double, publicKeyHex: String) throws -> String
  func geScalarmult(publicKeyHex: String, secretKeyHex: String) throws -> String
  func geAdd(point1Hex: String, point2Hex: String) throws -> String
  func geScalarmultBase(secretKeyHex: String) throws -> String
  func geDoubleScalarmultBaseVartime(cHex: String, PHex: String, rHex: String) throws -> String
  func geDoubleScalarmultPostcompVartime(rHex: String, PHex: String, cHex: String, IHex: String) throws -> String
}

/// See ``HybridCryptonoteSpec``
open class HybridCryptonoteSpec_base {
  private weak var cxxWrapper: HybridCryptonoteSpec_cxx? = nil
  public init() { }
  public func getCxxWrapper() -> HybridCryptonoteSpec_cxx {
  #if DEBUG
    guard self is HybridCryptonoteSpec else {
      fatalError("`self` is not a `HybridCryptonoteSpec`! Did you accidentally inherit from `HybridCryptonoteSpec_base` instead of `HybridCryptonoteSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridCryptonoteSpec_cxx(self as! HybridCryptonoteSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Cryptonote HybridObject.
 * Implement this protocol to create Swift-based instances of Cryptonote.
 * ```swift
 * class HybridCryptonote : HybridCryptonoteSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridCryptonoteSpec = HybridCryptonoteSpec_protocol & HybridCryptonoteSpec_base
